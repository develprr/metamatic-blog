---
layout: post
title: New Winds
date:   2022-10-13 19.50.00 +0300
categories: metamatic
---

![wind mill]({{ site.baseurl }}/assets/windmill.png)

## Back in the 80's

In the 80's, there was no Internet. If you had an MSX computer and lived
in Northern Finland, you were messed. There were very few games available for that
Japanese piece of garbage. But the MSX computer had a pre-installed programming
language console, called "MSX Basic". And there was a monthly published
programming magazine "Mikrobitti". The magazine provided software code listings that
spanned over dozens of pages. If you really manually copied all that code from 
the magazine into your PC you would finally have a real 
computer game!

## Change is the only constant

In software development, winds of change probably blow faster than
in any other branch. It is good to be a software developer, but only if 
you have a constantly curious mind and you are ready to learn new things.

When the weather turns windy after a long period of relative calmness, 
the right way to encounter the weather change is not to be torn from the ground 
like an old rotten wind mill, but to rather be like a sail boat that just
turns the sails and adapts itself to embrace the new current as the long-awaited empowering force!

## How to stay relevant

There is no question that in software development very
few things are more important than the habit of continuously learning new matters 
to stay relevant. The question, however, is how to maintain that mindset 
over time. For junior developers, the only option really is to study hard and
explore how to go about it - and that is, because they have a more
limited set of design patterns or implementation patterns than more
experienced coders. But having matured patterns about how to keep implementing
code and features at an "impressive pace" can actually be a danger in disguise -

because it's exactly those home-grown mental patterns of solving things
that can also make a seasoned developer close their eyes from new emerging technologies
and paradigms - up to the point that the day comes when the change stands in front of you
like a tsunami - and then it is too late! 

## Learning from tutorials

Luckily, there are some quite robust patterns that you can follow to
keep learning, renewing your knowledge base and keeping your skillset
up to date: tutorials! As this is no surprise, surprising however
is how many people just keep ignoring all the available free material
on the Internet that could help them learn more and more - and instead just
waste their time on all that entertainment that all "toktiks" and "flixnets"
(or whatever) keep force-feeding with all the power of their smart algorithms - to 
keep you stupid!

Learning from tutorials on a daily basis - it is possible. But it requires
you to always remember that you must keep learning. Another thing to remember
when learning from tutorials is to be honest to yourself and patient with
results. To remember that going through a tutorial is almost useless if you just copy-paste the code from the
examples into your project before attempting to run it. 
Instead, I recommend everybody who wants to learn from tutorials to really 
take the pain to manually type in everything and to try to think what the
code means. Very few things are more profoundly satisfying than having implemented
the examples of a tutorial correctly and you actually understand the
code that you have typed!

## Why I wrote this?

Today, I read from a newspaper an article that emphasized all the benefits 
of walking in the forest. So I went into the autumn forest and looked
at everything that I saw around me. Then I started thinking about writing this
blog post and when I came home, I just switched on the PC and did it.

That's all folks this time. Enjoy your day. And also remember to have a walk
in the forest sometimes! :)
